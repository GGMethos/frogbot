#plugin made by Red-M on github or Red_M on esper.net  help from Luke.
from util import hook, perm, http, mcrcon
from datetime import timedelta
import cherrypy
import os
import sys
import time
import json
import re
import inspect
import platform
import time
import struct
import socket
import threading
import SocketServer
import re
import select

global plays
global getmcdata
global playeramount
global mess
roundtonum=3
mess = "&6Unknown Error. Try again?"
playeramount=["2"]
getmcdata=[]
plays = 2

class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        data = self.request.recv(1024)
        if data.startswith("requesting bot variable data refreshment." \
                                                        " please respond."):
            self.request.sendall(str(sendo))
        else:
            cur_thread = threading.current_thread()
            response = "{}: {}".format(cur_thread.name, data)
            responseReplaced = response.replace("  ","").replace("\n","") \
                                                        .replace("\\","\\\\")
            getmcdata.append("%s:%s wrote: %s" %
                            (self.client_address[0],self.client_address[1], \
                                                            responseReplaced))
            if data=="\x01":
                self.request.sendall("\x02")
            self.request.sendall("\x00\x07"+"\x20"*128+"\x00")
            self.request.sendall("\x0e"+mess+"\x20"*(64-len(mess)))
            playeramount.append(cur_thread.name) 

class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    pass
    
@hook.singlethread
@hook.event('004')
def web(inp,input=None,bot=None):
    time.sleep(10)
    print "Starting web backend."
    while True:
        chanxcon = []
        i = 0
        for xcon in bot.conns:
            if bot.conns[xcon].conf['bouncer-server'].lower()=="true":
                chanxcon.append([])
                chanxcon[i].append("<li>%s:</li>" %
                (str(bot.conns[xcon].conf['actualaddress'])))
                for chans in bot.conns[xcon].channels:
                    chanxcon[i].append("<p>"+str(chans)+"</p>")
            else:
                chanxcon.append([])
                chanxcon[i].append("<li>%s:</li>" % (xcon))
                for chans in bot.conns[xcon].channels:
                    chanxcon[i].append("<p>%s</p>" % (chans))
            i+=1
        #print chanxcon
        global sendo
        sendo = str(savevars(input.conn.nick,chanxcon,input.bot,input))
        time.sleep(1)

@hook.event('004')
@hook.singlethread
def webservers(inp,input=None,bot=None):
    time.sleep(15)
    i = 0
    while True:
        if i==0:
            bottestweb = ThreadedTCPServer(("127.0.0.1", 4329), \
                                                    ThreadedTCPRequestHandler)
            ip, portss = bottestweb.server_address
            server_thread = threading.Thread(target=bottestweb.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            if os.name == 'posix':
                os.system("./plugins/web/server.py")
            elif os.name == 'nt':
                pathing = "plugins\web\server.py"
                os.system(str(bot.path).replace("bot.py","")+pathing)
            #i+=1

def savevars(nickss,chanss,bot,input):
    test={}
    test['nick'] = nickss
    test['channels'] = chanss
    test['pythonver'] = ('%s %s' %
                (platform.python_implementation(),platform.python_version()))
    test['host'] = platform.node()
    test['os'] = platform.platform()
    test['bit'] = '-'.join(platform.architecture())
    test['uptime'] = uptime(bot)
    test['mem'] = vmem(input)
    test['cmds'] = cmdgroups(bot)
    test['cmdlen'] = cmdgrouplen(bot)
    test['players'] = str(int(plays)-2) or "0"
    return test

@hook.command('fakemcserv')
@hook.command
def fakemcserver(inp,bot=None,input=None):
    ",fakemcserver <port> <max players> <server-name-with-no-spaces> " \
    "<players-you-want-on-it> -- makes a fake minecraft classic server." \
    "also appears on the mc classic server list..."
    
    if perm.isowner(input):
        check = input.inp.split(" ")
        if len(check)==4:
            i = 0
            HOST, PORT = "", int(check[0])
            global bottest
            bottest = ThreadedTCPServer((HOST, PORT), \
                                        ThreadedTCPRequestHandler)
            ip, portss = bottest.server_address
            global server_thread
            server_thread = threading.Thread(target=bottest.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            perm.repamsg(input,"Server loop running in thread: %s" %
                                                        (server_thread.name))
            url1 = ("http://www.minecraft.net/heartbeat.jsp?port=%s" %
                                                                (check[0]))
            url2 = ("&max=%s&name=%s&public=True&version=7" %
                                                        (check[1],check[2]))
            url3 = "&users=%s" % (check[3])
            pageUrl = ("%s%s&salt=wo6kVAHjxoJcInKx%s" % 
                                                            (url1,url2,url3))
            web = str(http.get(pageUrl))
            perm.repamsg(input,web)
            while True:
                web = str(http.get(pageUrl))
                if i==100:
                    i=0
                    perm.repamsg(input,web)
                global plays
                plays = int(str(playeramount[-1]).replace("Thread-",""))
                bot.test["test"]=int(plays)-2
                i+=1
                time.sleep(45)
        else:
            return("error.")
    else:
        return("Nope.avi")

def uptime(bot):
    uptime_raw = round(time.time() - bot.start_time)
    uptime = timedelta(seconds=uptime_raw)
    return "Uptime: %s" % uptime

def vmem(input):
    if os.name == "posix":
        status_file = open('/proc/self/status').read()
        s = dict(re.findall(r'^(\w+):\s*(.*)\s*$', status_file, re.M))
        data = s['VmRSS'], s['VmSize'], s['VmPeak'], s['VmStk'], s['VmData']
        data = [float(i.replace(' kB', '')) for i in data]
        strings = []
        for i in data:
            if ((i/1024)<1):
                strings.append(str(int(i)) + ' kB')
            else:
                strings.append(str(round(i / 1024, roundtonum)) + ' MB')
        out = "Threads: %s, Real: %s, Alloc: %s, Peak " \
              "Alloc: %s, Stack: %s, Heap" \
              ": %s" % (s['Threads'], strings[0], strings[1], strings[2],
              strings[3], strings[4])
        return out
    elif os.name == "nt":
        cmd = 'tasklist /FI "PID eq %s" /FO CSV /NH' % os.getpid()
        out = os.popen(cmd).read()
        memory = 0
        for amount in re.findall(r'([,0-9]+) K', out):
            memory += int(amount.replace(',', ''))
        memory = str(round(float(memory) / 1024, roundtonum))
        return "%s MB" % memory
    else:
        return "Sorry, this is not supported on your OS."

def helpss(bot):
    funcs = {}
    disabled = bot.config.get('disabled_plugins', [])
    disabled_comm = bot.config.get('disabled_commands', [])
    for command, (func, args) in bot.commands.iteritems():
        fn = re.match(r'^plugins.(.+).py$', func._filename)
        if fn.group(1).lower() not in disabled:
            if command not in disabled_comm:
                if func.__doc__ is not None:
                    if func in funcs:
                        if len(funcs[func]) < len(command):
                            funcs[func] = command
                    else:
                        funcs[func] = command

    commands = dict((value, key) for key, value in funcs.iteritems() \
                                                if key not in ["8ballnooxt"])
    well = []
    for x in commands:
        well.append(","+x)
    well.sort()
    return well

def client(ip, port, message):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, port))
    try:
        sock.sendall(unicode(message))
        print message
        data = sock.recv(1024*4).decode("utf8").replace("\n","\\n")
        enddata = data
        data = "response from ("+str(ip)+":"+str(port)+"): "+enddata
    except Exception, msg:
        sock.close()
        return "("+str(ip)+":"+str(port)+") Error: '"+str(msg)+"'."
    finally:
        sock.close()
        return data

repcolours = {
"\xa7f": "\x030",
"\xa70": "\x031",
"\xa71": "\x032",
"\xa72": "\x033",
"\xa73": "\x0312",
"\xa74": "\x035",
"\xa75": "\x036",
"\xa76": "\x037",
"\xa77": "\x0315",
"\xa78": "\x0314",
"\xa79": "\x0312",
"\xa7a": "\x039",
"\xa7b": "\x0311",
"\xa7c": "\x034",
"\xa7d": "\x0313",
"\xa7e": "\x038"}
        
def rconclient(ip, port, pwd, message):
    r = mcrcon.MCRcon(ip, port, pwd)
    rdata = r.send(message)
    for dart in repcolours:
        rdata = rdata.replace(dart,repcolours[dart])
    r.close()
    return rdata
    
@hook.command
def rcon(inp,bot=None,input=None):
    if inp=="":
        return(",rcon <hostname/ip> <port> <password(must have NO spaces...)> <command to use on server> -- rcon client for a minecraft server. Best to use this in a PM.")
    check = input.inp.split(" ")
    check2 = input.inp.replace(check[0]+" "+check[1]+" "+check[2]+" ","")
    if perm.isowner(input):
        try:
            rdata = (rconclient(check[0],int(check[1]),check[2],check2))
        except Exception, msg:
            return("Error. "+str(msg))
        rdat = rdata.split('\n')
        for dat in rdat:
            input.say(dat)
        return "Done."
    return "Nope.avi"
@hook.command
def tcp(inp,bot=None,input=None):
    ",tcp <IP/web-address> <port> <message> -- sends a tcp packet to " \
    "<IP/web-address> at port <port> with <message> as the message." \
    " only the bot owner can use this."
    
    check = input.inp.split(" ")
    check2 = input.inp.replace(check[0]+" "+check[1]+" ","")
    if perm.isowner(input):
        return client(check[0],int(check[1]),check2)
    return "Nope.avi"

def cmdgrouplen(bot):
    testdict = []
    dictdata = helpss(bot)
    datalen = (int(len(helpss(bot)))/16)
    datalen2 = (int(len(helpss(bot))))
    for x in range(-1,(datalen)):
        testdict.append([])
    return len(testdict)
        
def cmdgroups(bot):
    i = 1
    ii = 0
    testdict = []
    dictdata = helpss(bot)
    datalen = (int(len(helpss(bot)))/16)
    datalen2 = (int(len(helpss(bot))))
    for x in range(-1,(datalen)):
        testdict.append([])
    for data in dictdata:
        testdict[ii].append(data)
        if i==16:
            ii+=1
            if ii==datalen+1:
                ii = 0
            i = 0
        i+=1
    return testdict
	
@hook.command
def players(inp,input=None,bot=None):
    "returns the amount of players that have tried to join the bot's " \
    "fake minecraft classic server."
    
    return str(int(plays)-2)
        
@hook.command
def mcmess(inp,bot=None,input=None):
    "the disconnect message users recieve on the fake minecraft classic" \
    " server when they try to connect. bot owner only."
    
    if perm.isowner(input):
        global mess
        mess = inp
        return "Done."
    else:
        return "Nope.avi"